{"version":3,"sources":["Components/Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","useState","counter","setCounter","maxCounterValue","useEffect","className","onClick","type","onChange","e","console","log","parseInt","target","value","handleChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAGe,SAASA,IACpB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEIC,EAAkB,IAEtBC,qBAAU,WACDH,GACDC,EAAW,KAEhB,IA0BH,OACI,sBAAKG,UAAU,YAAf,UACI,qBAAKC,QAAS,WAddL,GAAW,GACXC,EAAWD,EAAU,IAakBI,UAAU,WAAjD,iBACA,uBAAOE,KAAK,SAASF,UAAU,aAAaG,SAAU,SAACC,GAAD,OAVzC,SAACA,GAClBC,QAAQC,IAAI,QAASC,SAASH,EAAEI,OAAOC,OAAQL,EAAEI,OAAOC,MAAQ,IAC5DL,EAAEI,OAAOC,OAASX,GAClBD,EAAWU,SAASH,EAAEI,OAAOC,QAOgCC,CAAaN,IAAIK,MAAOb,IACrF,qBAAKK,QAAS,YA3BKL,EAAUE,GAIzBF,EAAU,KAHdC,EAAWD,EAAU,IA0BkBI,UAAU,YAAjD,oBChCGW,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCOSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d4b3b99e.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './Counter.css';\n\nexport default function Counter() {\n    const [counter, setCounter] = useState('');\n\n    var maxCounterValue = 1000;\n\n    useEffect(() => {\n        if (!counter) {\n            setCounter(1);\n        }\n    }, [])\n\n    const handleIncrement = () => {\n        if (maxCounterValue && counter < maxCounterValue) {\n            setCounter(counter + 1);\n        }\n        else {\n            if (counter < 15) {\n                setCounter(counter + 1);\n            }\n        }\n    }\n\n    const handleDecrement = () => {\n        if (counter >= 1) {\n            setCounter(counter - 1);\n        }\n    }\n\n    const handleChange = (e) => {\n        console.log('event', parseInt(e.target.value), e.target.value < 15);\n        if (e.target.value <= maxCounterValue) {\n            setCounter(parseInt(e.target.value));\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <div onClick={() => handleDecrement()} className=\"left-box\"> - </div>\n            <input type=\"number\" className=\"middle-box\" onChange={(e) => handleChange(e)} value={counter}></input>\n            <div onClick={() => handleIncrement()} className=\"right-box\"> + </div>\n        </div>\n    )\n}","import Counter from './Components/Counter';\n \nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}